#!/usr/bin/env node

/**
 * Log configuration
 */
const chalk = require('chalk')
global.log = (msg) => {
    // Teal
    console.log(chalk.rgb(0, 128, 128)(msg))
}
global.warning = (msg) => {
    // kahki
    console.warning(chalk.rgb(240, 230, 140)(msg))
}
global.error = (msg) => {
    // Crimson
    console.log(chalk.rgb(220, 20, 60)(msg))
}
global.devlog = (msg) => {
    console.log(chalk.yellow(msg))
}

/**
 * Module dependencies.
 */
const config = require('../config/config');

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
var host = process.env.HOST || 'localhost';
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, host);
log("Http server listening on\t\t\t\t" + host + ":" + port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
